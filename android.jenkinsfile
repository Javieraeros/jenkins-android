#!groovy
//Jenkinsfile (Declarative Pipeline)

// ------------------------------------
// -- Variables Configuration
// ------------------------------------
// --------------------------------------------------------------
// -- Internal Variables to be used on the different Stages.
// --------------------------------------------------------------
// -- APK Name. It's created with the version and build.
def JOB_APK_NAME
def JOB_APK_FOLDER
def JOB_BUILD_TYPE

import java.text.SimpleDateFormat
import java.util.Random
def dateFormat = new SimpleDateFormat("dd_MM_yyyy-HH_mm")
def date = new Date()
def JOB_TAG_NAME = dateFormat.format(date)

// -- Keep only 50 builds
echo 'Discard old build'
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '',
    daysToKeepStr: '', numToKeepStr: "50"))])

pipeline {

    environment {
        ANDROID_HOME='/home/jenkins/'
        PATH='/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
        LANG="en_US.UTF-8"
    }
    // -- Display a timestamp on the log.
    options{
        timestamps()
        disableConcurrentBuilds()
    }
    agent {
      docker {
        image 'bitriseio/docker-android'
        args '-it --entrypoint=/bin/bash'
      }
    }

    stages {

       // ------------------------------------
       // -- STAGE: Clean Workspace
       // ------------------------------------
       stage('Clean Workspace') {
            steps {
                echo 'Clean Workspace'
                cleanWs()
            }
       }

       // -- Parameters needed: JOB_GIT_BRANCH, JOB_GIT_URL
       // --------------------------------
       // -- STAGE: Download GIT Code
       // --------------------------------
       stage('Download GIT Code') {
            steps {
                script {
                    try {
                        echo "Downloading GIT Code from: ${JOB_GIT_URL}. Branch: ${JOB_GIT_BRANCH}"
                        git branch: "${JOB_GIT_BRANCH}", changelog: false, poll: false, url: "${JOB_GIT_URL}"

                    } catch (err) {
                        echo "The Download Git Code Stage failed"
                    }
                }
            }
        }

       // -- Parameters needed: JOB_BUILD_TYPE
       // ------------------------------------
       // -- STAGE: Load properties
       // ------------------------------------
       stage('Load Properties') {
            steps {
                script {
                    try {
                        // -- Load values from the properties.
                        // JOB_BUILD_TYPE = JOB_PROPERTIES_FILE
                        echo 'Loading properties'
                        // -- load "${WORKSPACE}/jenkins/environment/${JOB_BUILD_TYPE}.properties"
                        echo "Load ${JOB_BUILD_TYPE}.properties"
                    } catch (err) {
                        echo "The Load Properties Stage failed"
                    }
                }
            }
       }

               // -- Parameters needed: JOB_COMPILE_FLAVOR, JOB_COMPILE_TYPE
        // -------------------------------------
        // -- STAGE: Android Test
        // -------------------------------------
        stage('Android Test'){
            when {
                expression { return PIPELINE_ANDROID_TEST_ENABLE == "true" }
            }
            steps {
                script {

                    try {

                         //-- Set execution permission to the gradlew file.
                        sh '''
                            ls -al
                            chmod +x ./gradlew
                        '''

                        // -- Remove the possibility to connect into a display
                        sh "unset DISPLAY"


                        //-- Run Android Lint

                        echo 'Executing Android Test and publishing the Android Test results '

                        sh "./gradlew test$JOB_COMPILE_FLAVOR$JOB_COMPILE_TYPE"

                    } catch (err) {

                        echo "The Android Test Stage failed"

                    }
                }
            }
        }

        // -- Parameters needed: JOB_COMPILE_FLAVOR, JOB_COMPILE_TYPE
        // -------------------------------------
        // -- STAGE: Android Lint
        // -------------------------------------
        stage('Android Lint'){
            when {
                expression { return PIPELINE_ANDROID_LINT_ENABLE == "true" }
            }
            steps {
                script {

                    try {

                         //-- Set execution permission to the gradlew file.
                        sh '''
                            cd .
                            chmod +x ./gradlew
                        '''

                        // -- Remove the possibility to connect into a display
                        sh "unset DISPLAY"


                        //-- Run Android Lint

                        echo 'Executing Android Lint and publishing the Android Lint results '

                        sh "./gradlew lint$JOB_COMPILE_FLAVOR$JOB_COMPILE_TYPE"
                        // androidLint defaultEncoding: 'UTF-8', failedNewHigh: '10', failedTotalHigh: '30', healthy: '', pattern: '**/lint-results*.xml', thresholdLimit: 'high', unHealthy: '', unstableNewHigh: '5', unstableTotalHigh: '10'

                        androidLint()

                    } catch (err) {

                        echo "The Android Lint Stage failed"

                    }
                }
            }
        }

       // -- Parameters needed: JOB_COMPILE_FLAVOR, JOB_COMPILE_TYPE
       // ------------------------------------
       // -- STAGE: Build APK
       // ------------------------------------
       stage('Build APK') {
            when {
                expression { return PIPELINE_ANDROID_BUILD_ENABLE == "true" }
            }
            steps {
                script {
                            //-- Building
                            echo 'Building APK'

                            //-- Set execution permission to the gradlew file.
                            sh '''
                                cd .
                                chmod +x ./gradlew
                            '''

                            // -- Remove the possibility to connect into a display
                            sh "unset DISPLAY"


                            // -- Increase Java memory by default, to secure the build process
                            sh """
                            touch gradle.properties
                            echo "org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
                            org.gradle.daemon=false
                            org.gradle.parallel=false" >> gradle.properties
                            """

                            //-- Building APK
                            sh "./gradlew assemble$JOB_COMPILE_FLAVOR$JOB_COMPILE_TYPE --stacktrace"


                }
            }
        }

        // -----------------------------------------------
        // -- STAGE: Get APK Name
        // -----------------------------------------------
        stage('Get APK Name'){
            when {
                expression { return PIPELINE_ANDROID_BUILD_ENABLE == "true" }
            }
            steps {
                script {
                    try {
                        // -- Search the *.apk generated on the /apks directory
                        echo 'Searching all the *.apk files generated on the /apks directory'
                        JOB_APK_FOLDER = "${WORKSPACE}/apks"
                        JOB_APK_NAME = sh (returnStdout: true, script: 'ls -t  "${WORKSPACE}/apks" | grep .apk | head -n1').trim()                        echo "The APK name is: ${JOB_APK_NAME}"
                        JOB_TAG_NAME = sh (returnStdout: true, script: 'ls -t  "${WORKSPACE}/apks" | grep .apk | head -n1 | tr " " _ ').trim()
                        echo "The Tag name is: ${JOB_TAG_NAME}"
                    } catch (err) {
                        echo "The Get APK Name Stage failed"
                    }
                }
            }
        }

       // ------------------------------------
       // -- STAGE: Archive APK
       // ------------------------------------
       stage('Archive APK') {
            when {
                expression { return PIPELINE_ANDROID_BUILD_ENABLE == "true" }
            }
            steps {
                script {
                    try {
                        //-- Archive the apk artifacts.
                        archiveArtifacts "**/apks/*.apk"
                        echo "The artifacts were archives successfully"
                    } catch (err) {
                        echo "The Archive APK Stage failed"
                    }
                }
            }
       }
}// -- Fin Pipeline
